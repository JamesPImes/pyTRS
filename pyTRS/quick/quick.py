# Copyright (c) 2020, James P. Imes, All rights reserved.

"""
Quick functions for simple parsing operations, without storing
PLSSDesc objects or Tract objects or accessing higher-level data.
"""

def quick_parse_list(
        text, layout=None, defaultNS='n', defaultEW='w', config='') -> list:
    """
    Parse text of a PLSS land description directly into a nested list
    containing the TRS and description block of each identified tract.

    :param text: Text of a PLSS land description to be parsed.
    :param layout: The pyTRS layout. (See `__implementedLayouts` list
    for options.) Will be deduced by the parser if not specified.
    :param defaultNS: How to interpret townships for which direction
    was not specified -- i.e. either 'n' or 's'. (Defaults to 'n')
    :param defaultEW: How to interpret ranges for which direction
    was not specified -- i.e. either 'e' or 'w'. (Defaults to 'w')
    :param config: A pyTRS.Config object or a string containing
    equivalent config parameters, configuring the parse. (See
    documentation on pyTRS.Config objects for parameter options.)
    :return: Returns a nested list, with each sub-list containing the
    TRS and description block for a separate identified Tract.
    """

    from pyTRS.parser import PLSSDesc, Config

    if isinstance(config, Config):
        config = config.decompile_to_text()

    # Compile the config string:
    config = ','.join([f'{layout},{defaultNS},{defaultEW}',config])

    d = PLSSDesc(text, layout=layout, config=config, initParse=True)
    return d.tracts_to_list('trs', 'desc')


def quick_parse_str(
        text, layout=None, defaultNS='n', defaultEW='w', config='') -> str:
    """
    Parse text of a PLSS land description directly into a string
    containing the TRS and description block of each identified tract,
    with each tract on a separate line.

    All parameters are identical to `quick_parse_list()`.
    """

    qpl = quick_parse_list(text, layout, defaultNS, defaultEW, config)
    qpl2 = []
    for tract in qpl:
        qpl2.append(': '.join(tract))
    return '\n'.join(qpl2)


def quick_flags(text) -> list:
    """
    Generate the error and warning flags that would be generated by
    parsing the PLSS description, without storing a PLSSDesc object.
    Returns a list of flags.
    """
    from pyTRS.parser import PLSSDesc

    PLSSDescObj = PLSSDesc(text, initParseQQ=True)

    return PLSSDescObj.eFlagList + PLSSDescObj.wFlagList


def quick_flag_lines(text) -> list:
    """
    Find the lines in the text that would generate error and warning
    flags by parsing the PLSS description, without storing a PLSSDesc
    object. Returns a list of 2-tuples: (flag, context).
    """
    from pyTRS.parser import PLSSDesc

    PLSSDescObj = PLSSDesc(text, initParseQQ=True)

    return PLSSDescObj.eFlagLines + PLSSDescObj.wFlagLines


def quick_lotsQQ(text, cleanQQ=False) -> list:
    """
    Parses the text as though it were a Tract, and returns a single list
    of resulting lots and QQ's, without storing a `Tract` object.

    :param cleanQQ: Whether to expect only clean lots and QQ's (i.e.
    no metes-and-bounds, exceptions, complicated descriptions,
    etc.). Defaults to False.
    """
    from pyTRS.parser import Tract
    return Tract(desc=text, config=f'{"cleanQQ"*cleanQQ},initParseQQ').lotQQList

