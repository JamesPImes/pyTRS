~~~~~~~~~~~~~~~~~ ALL pyTRS CONFIG PARAMETER OPTIONS ~~~~~~~~~~~~~~~~~

Where two parameters are stated below with <or>, they are functionally equivalent to one another (i.e. either option can be used for the same effect).

And [**] denotes default behavior that need not be specified in config (usually the `.False` option for such settings is the non-default).

USAGE:
Combine desired parameters into a single string, separated by comma or semicolon, like so:
   'default_ns.n, default_ew.w, clean_qq, include_lot_divs.False'
(Spaces are optional and have no effect.)

The string should be the first positional argument of a Config object, or the init parameter `config=` when creating PLSSDesc and/or Tract objects:
>>> config_obj = pytrs.Config('n,w,clean_qq')
>>> tract_obj = pytrs.Tract('154n97w14', 'NE/4', config='n,w,clean_qq')


 ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
'n'                     )
  <or>                  )--> Assume any missing N/S in a Twp should be 'n' [**]
'default_ns.n'          )
 ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
's'                     )
  <or>                  )--> Assume any missing N/S in a Twp should be 's'
'default_ns.s'          )
 ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
'w'                     )
  <or>                  )--> Assume any missing E/W in a Rge should be 'w' [**]
'default_ew.w'          )
 ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
'e'                     )
  <or>                  )--> Assume any missing E/W in a Rge should be 'e'
'default_ew.e'          )
 ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
'init_parse'            )--> PLSSDesc object should parse at initialization
 ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
'init_parse_qq'         )--> Tract object (or PLSSDesc object's subordinate Tract objects) should parse lots/aliquots at initialization
 ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
'init_preprocess'       )
  <or>                  )--> Will preprocess description at initialization [**]
'init_preprocess.True'  )
 ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
'init_preprocess.False' )--> Will NOT preprocess description at initialization
 ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
'clean_qq'              )--> Expect ONLY clean aliquots/lots
 ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
'require_colon'         )
  <or>                  )--> Require a colon between Section number and its following description block (on a 'first-pass' attempt at a parse only) [**]
'require_colon.True'    )
 ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
'require_colon.False'   )--> Do not require a colon in that position
 ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
'include_lot_divs'      )
  <or>                  )--> Report lot divisions (i.e., 'N2 of L1' for 'N/2 of Lot 1') [**]
'include_lot_divs.True' )
 ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
'include_lot_divs.False')--> Do NOT report lot divisions (i.e. just 'L1', even if divided further)
 ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
'ocr_scrub'             )
  <or>                  )--> Scrub common OCR artifacts from the text (currently limited effect)
'ocr_scrub.True'        )
 ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
'ocr_scrub.False        )--> Do NOT scrub OCR artifacts from the text. [**]
 ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
'segment'               )
  <or>                  )--> Segment description before parsing into Tracts (MIGHT capture descriptions with multiple layouts).
'segment.True'          )
 ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
'segment.False          )--> Do NOT segment the description before parsing. [**]
 ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
'qq_depth_min.<number>' )--> In QQ parsing, specify the MINIMUM 'depth' to parse aliquots. 2 (the default) will parse to AT LEAST quarter-quarters (QQs). [**]
 ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
'qq_depth_max.<number>' )--> In QQ parsing, specify the MAXIMUM 'depth' to parse aliquots, and discard any smaller divisions.
 ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
'qq_depth.<number>'     )--> In QQ parsing, specify the EXACT 'depth' to parse aliquots (i.e. qq_depth_min == qq_depth_max), discarding any smaller divisions.
 ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
'break_halves'          )
  <or>                  )--> In QQ parsing, break all aliquot halves into quarters, EVEN IF we're at divisions smaller than the specified `qq_depth_min`.
'break_halves.True'     )
 ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
'break_halves.False'    )--> In QQ parsing, leave halves as they are (but ONLY IF we're at divisions smaller than the specified `qq_depth_min`). [**]
 ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
'TRS_desc'              )
  <or>                  )--> do not deduce layout; instead, force 'TRS_desc' (NOT RECOMMENDED)
'layout.TRS_desc'       )
 ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
'desc_STR'              )
  <or>                  )--> do not deduce layout; instead, force 'desc_STR' (NOT RECOMMENDED)
'layout.desc_STR'       )
 ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
'S_desc_TR'             )
  <or>                  )--> do not deduce layout; instead, force 'S_desc_TR' (NOT RECOMMENDED)
'layout.S_desc_TR'      )
 ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
'TR_desc_S'             )
  <or>                  )--> do not deduce layout; instead, force 'TR_desc_S' (NOT RECOMMENDED)
'layout.TR_desc_S'      )
 ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
'copy_all'              )
  <or>                  )--> do not deduce layout; instead, force 'copy_all' (NOT RECOMMENDED)
'layout.copy_all'       )
 ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~